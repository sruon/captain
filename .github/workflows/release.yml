name: Release

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - uses: googleapis/release-please-action@v4
      id: release
      with:
        config-file: .github/release-please-config.json
        manifest-file: .github/.release-please-manifest.json

  build-sqlite:
    runs-on: windows-latest
    needs: check-release
    if: ${{ needs.check-release.outputs.release_created }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build SQLite3 DLL (32-bit)
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW32
        update: true
        install: >-
          mingw-w64-i686-gcc
          mingw-w64-i686-sqlite3
          mingw-w64-i686-pkg-config
          make
          unzip
    
    - name: Compile SQLite3 DLL
      shell: msys2 {0}
      run: |
        # Create deps directory
        mkdir -p deps
        
        # Download SQLite3 source for static compilation
        curl -o sqlite3.zip https://sqlite.org/2024/sqlite-amalgamation-3460100.zip
        unzip sqlite3.zip
        cd sqlite-amalgamation-3460100
        
        # Build fully static 32-bit SQLite3 DLL for Windows
        gcc -m32 -shared -o ../deps/sqlite3.dll \
          sqlite3.c \
          -DSQLITE_ENABLE_FTS5 \
          -DSQLITE_ENABLE_JSON1 \
          -DSQLITE_ENABLE_RTREE \
          -DSQLITE_API=__declspec\(dllexport\) \
          -static-libgcc \
          -Wl,--out-implib,../deps/libsqlite3.dll.a \
          -Wl,--no-undefined
        
        cd ..
        rm -rf sqlite3.zip sqlite-amalgamation-3460100

    - name: Upload SQLite3 artifact
      uses: actions/upload-artifact@v4
      with:
        name: sqlite3-dll
        path: deps/sqlite3.dll

  package-release:
    runs-on: ubuntu-latest
    needs: [check-release, build-sqlite]
    if: ${{ needs.check-release.outputs.release_created }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Download SQLite3 artifact
      uses: actions/download-artifact@v4
      with:
        name: sqlite3-dll
        path: deps/

    - name: Fetch dependencies
      run: |
        mkdir -p deps
        
        curl -o deps/serpent.lua https://raw.githubusercontent.com/pkulchenko/serpent/refs/heads/master/src/serpent.lua
        curl -o deps/json.lua https://raw.githubusercontent.com/rxi/json.lua/refs/heads/master/json.lua
        curl -o deps/binaryheap.lua https://raw.githubusercontent.com/Tieske/binaryheap.lua/refs/heads/master/src/binaryheap.lua
        curl -o deps/coxpcall.lua https://raw.githubusercontent.com/keplerproject/coxpcall/refs/heads/master/src/coxpcall.lua

        curl -L -o copas.zip https://github.com/lunarmodules/copas/archive/refs/tags/4.8.0.zip
        unzip copas.zip
        cp -r copas-4.8.0/src/* deps/
        rm -rf copas.zip copas-4.8.0
        
        curl -L -o lua-websockets.zip https://github.com/lipp/lua-websockets/archive/refs/tags/v2.2.zip
        unzip lua-websockets.zip
        cp -r lua-websockets-2.2/src/* deps/
        rm -rf lua-websockets.zip lua-websockets-2.2
        
        curl -L -o timerwheel.zip https://github.com/Tieske/timerwheel.lua/archive/refs/tags/1.0.2.zip
        unzip timerwheel.zip
        cp timerwheel.lua-1.0.2/src/timerwheel/init.lua deps/timerwheel.lua
        rm -rf timerwheel.zip timerwheel.lua-1.0.2

    - name: Make release zipball
      run: |
        mkdir -p release/captain
        
        rsync -av \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='captures' \
          --exclude='release' \
          --exclude='.gitignore' \
          --exclude='.editorconfig' \
          --exclude='_images' \
          ./ release/captain/
        
        cd release
        zip -r ../captain.zip captain/
        cd ..
        
        echo "Zip file contents:"
        unzip -l captain.zip | head -20

    - name: Upload Release Asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release upload ${{ needs.check-release.outputs.tag_name }} captain.zip --clobber
        
        echo "Uploaded captain.zip to release ${{ needs.check-release.outputs.tag_name }}"
        ls -la captain.zip
